
"""Types declaration"""

scalar SessionId

scalar WorkflowId

scalar WorkflowType

scalar TaskId

scalar State

enum WorkflowStatus {
    WAITING
    IN_PROGRESS
    FINISHED
}

enum TaskStatus {
    IN_PROGRESS
    FINISHED
}

enum Validator {
    REQUIRED
    NUMERIC
    PHONE_NUMBER
}

"""Query declaration"""

type Query {
    session: Session!
    workflows(filter: WorkflowFilter): [Workflow!]!
}

type Session {
    id: SessionId!
    state: State!
}

type WorkflowFilter {
    ids: [WorkflowId!]!
    status: WorkflowStatus
}

type Workflow {
    id: WorkflowId!
    type: WorkflowType
    status: WorkflowStatus!
    tasks(filter: TaskFilter): [Task!]!
}

type TaskFilter {
    ids: [TaskId!]!
    status: TaskStatus
}

type Task {
    id: TaskId!
    data: [TaskData!]!
    status: TaskStatus!
    errors: [TaskProblems!]!
}

type TaskData {
    question: String!
    answer: String
    validators: [Validator!]!
}

"""Mutation declaration"""

type Mutation {
    session {
        start: StartSessionPayload
        state {
            update(input: UpdateStateInput!): UpdateStatePayload
        }
        close: CloseSessionPayload
    }

    workflow {
        init(input: InitWorkflowInput!): InitWorkflowPayload

        task {
            saveData(input: SaveDataInput!): SaveDataPayload
            complete(input: CompleteTaskInput!): CompleteTaskPayload
        }
    }
}

type StartSessionPayload {
    session: Session!
    errors: [SessionProblems!]!
}

type UpdateStateInput {
    state: State!
}

type UpdateStatePayload {
    status: Boolean!
    errors: [UpdateStateProblems!]!
    state: String!
}

type CloseSessionPayload {
    status: Boolean!
    errors: [SessionProblems!]!
}

type InitWorkflowInput {
    type: WorkflowType!
}

type InitWorkflowPayload {
    status: Boolean!
    workflow: Workflow!
    errors: [WorkflowProblems!]!
}

type SaveDataInput {
    id: TaskId!
    data: [TaskData!]!
}

type SaveDataPayload {
    status: Boolean!
    task: Task!
    errors: [TaskProblems!]!
}

type CompleteTaskInput {
    id: TaskId!
}

type CompleteTaskPayload {
    status: Boolean!
    task: Task!
    errors: [TaskProblems!]!
}

"""Errors declaration"""

union UpdateStateProblems = ParsingProblem

union TaskProblems = ValidationProblem

union SessionProblems = ServiceNotAvailableProblem

union WorkflowProblems = ServiceNotAvailableProblem

interface ProblemInterface {
    message: String!
}

type ParsingProblem implements ProblemInterface {
    message: String!
}

type ValidationProblem implements ProblemInterface {
    message: String!
    validator: Validator!
}

type ServiceNotAvailableProblem implements ProblemInterface {
    message: String!
}
